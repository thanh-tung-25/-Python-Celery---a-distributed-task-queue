# celery_app/tasks.py
import os
from time import sleep
from .celery_config import app as celery_app
from database.database import db, save_email_log
from flask import Flask
from dotenv import load_dotenv

load_dotenv()

def make_flask_context():
    """
    T·∫°o 1 Flask app nh·ªè ƒë·ªÉ Celery worker c√≥ app_context
    (d√πng ƒë·ªÉ SQLAlchemy ho·∫°t ƒë·ªông ƒë√∫ng trong worker).
    """
    flask_app = Flask(__name__)
    # d√πng DATABASE_URL n·∫øu c√≥, c√≤n kh√¥ng d√πng sqlite file m·∫∑c ƒë·ªãnh
    db_uri = os.getenv("DATABASE_URL", "sqlite:///email_logs.db")
    flask_app.config["SQLALCHEMY_DATABASE_URI"] = db_uri
    flask_app.config["SQLALCHEMY_TRACK_MODIFICATIONS"] = False
    db.init_app(flask_app)
    return flask_app

@celery_app.task(bind=True, name="send_bulk_emails")
def send_bulk_emails(self, subject, content, recipients):
    """
    G·ª≠i email h√†ng lo·∫°t (demo). G·ªçi save_email_log(email, subject, status, body).
    Kh√¥ng truy·ªÅn db.session.
    """
    if not isinstance(recipients, (list, tuple)):
        raise ValueError("recipients must be a list")

    flask_app = make_flask_context()

    results = []
    # M·ªói l·∫ßn mu·ªën thao t√°c DB: d√πng app_context()
    for r in recipients:
        try:
            # -------------- g·ª≠i mail ·ªü ƒë√¢y (mock) ----------------
            print(f"üì® (mock) sending to {r} ‚Äî subject: {subject}")
            sleep(1)   # m√¥ ph·ªèng th·ªùi gian g·ª≠i
            # ----------------------------------------------------

            # Ghi log th√†nh c√¥ng (kh√¥ng truy·ªÅn db.session)
            with flask_app.app_context():
                save_email_log(r, subject, "Success", content)

            results.append({"email": r, "status": "Success"})
        except Exception as exc:
            err = str(exc)
            with flask_app.app_context():
                save_email_log(r, subject, f"Error: {err}", content)
            results.append({"email": r, "status": f"Error: {err}"})

    return {"summary": f"Processed {len(recipients)}", "details": results}
